<?php

declare(strict_types=1);

namespace A2A\Models;

/**
 * Represents a file, data structure, or other resource generated by an agent during a task.
 *
 * @see https://a2a-protocol.org/dev/specification/#67-artifact-object
 */
class Artifact
{
    private string $artifactId;
    private ?string $name;
    private ?string $description;
    /** @var PartInterface[] */
    private array $parts;
    private ?array $metadata;
    private ?array $extensions;

    public function __construct(
        string $artifactId,
        array $parts,
        ?string $name = null,
        ?string $description = null,
        ?array $metadata = null,
        ?array $extensions = null
    ) {
        $this->artifactId = $artifactId;
        $this->parts = $parts;
        $this->name = $name;
        $this->description = $description;
        $this->metadata = $metadata;
        $this->extensions = $extensions;
    }

    public function getArtifactId(): string
    {
        return $this->artifactId;
    }

    public function toArray(): array
    {
        $data = [
            'artifactId' => $this->artifactId,
            'parts' => array_map(fn(PartInterface $part) => $part->toArray(), $this->parts),
        ];

        if ($this->name !== null) {
            $data['name'] = $this->name;
        }
        if ($this->description !== null) {
            $data['description'] = $this->description;
        }
        if ($this->metadata !== null) {
            $data['metadata'] = $this->metadata;
        }
        if ($this->extensions !== null) {
            $data['extensions'] = $this->extensions;
        }

        return $data;
    }

    public static function fromArray(array $data): self
    {
        $parts = [];
        if (isset($data['parts'])) {
            foreach ($data['parts'] as $partData) {
                // Assuming Part class has a fromArray method
                $parts[] = Part::fromArray($partData);
            }
        }

        return new self(
            $data['artifactId'],
            $parts,
            $data['name'] ?? null,
            $data['description'] ?? null,
            $data['metadata'] ?? null,
            $data['extensions'] ?? null
        );
    }

    /**
     * @return PartInterface[]
     */
    public function getParts(): array
    {
        return $this->parts;
    }
}